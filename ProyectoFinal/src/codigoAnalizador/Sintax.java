
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 28 23:47:03 CST 2022
//----------------------------------------------------

package codigoAnalizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 28 23:47:03 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\007" +
    "\000\002\004\005\000\002\004\004\000\002\014\012\000" +
    "\002\014\014\000\002\014\013\000\002\006\011\000\002" +
    "\006\012\000\002\021\006\000\002\012\003\000\002\012" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\007" +
    "\000\002\012\010\000\002\011\017\000\002\013\005\000" +
    "\002\013\007\000\002\013\006\000\002\013\004\000\002" +
    "\015\012\000\002\015\007\000\002\016\006\000\002\016" +
    "\010\000\002\016\010\000\002\016\006\000\002\016\007" +
    "\000\002\016\006\000\002\017\015\000\002\020\005\000" +
    "\002\020\005\000\002\010\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\022\006\011\012\006\013\020\014\023\015" +
    "\012\017\015\023\004\041\010\001\002\000\004\044\174" +
    "\001\002\000\026\002\ufff2\006\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\017\ufff2\023\ufff2\040\ufff2\041\ufff2\001\002" +
    "\000\004\037\165\001\002\000\026\002\ufff8\006\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\023\ufff8\040\ufff8" +
    "\041\ufff8\001\002\000\004\016\143\001\002\000\004\037" +
    "\115\001\002\000\006\025\112\043\113\001\002\000\026" +
    "\002\ufffe\006\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017" +
    "\ufffe\023\ufffe\040\ufffe\041\ufffe\001\002\000\004\002\111" +
    "\001\002\000\004\044\071\001\002\000\026\002\ufffa\006" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\023\ufffa" +
    "\040\ufffa\041\ufffa\001\002\000\024\002\000\006\011\012" +
    "\006\013\020\014\023\015\012\017\015\023\004\041\010" +
    "\001\002\000\004\037\033\001\002\000\026\002\ufff6\006" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\023\ufff6" +
    "\040\ufff6\041\ufff6\001\002\000\026\002\ufff4\006\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\023\ufff4\040\ufff4" +
    "\041\ufff4\001\002\000\004\044\025\001\002\000\026\002" +
    "\ufffc\006\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc" +
    "\023\ufffc\040\ufffc\041\ufffc\001\002\000\010\005\027\041" +
    "\010\045\026\001\002\000\026\002\ufff1\006\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\017\ufff1\023\ufff1\040\ufff1\041" +
    "\ufff1\001\002\000\004\044\031\001\002\000\026\002\ufff0" +
    "\006\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\023" +
    "\ufff0\040\ufff0\041\ufff0\001\002\000\004\005\032\001\002" +
    "\000\026\002\uffef\006\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\017\uffef\023\uffef\040\uffef\041\uffef\001\002\000\010" +
    "\014\035\033\036\043\037\001\002\000\004\040\050\001" +
    "\002\000\004\044\046\001\002\000\004\044\045\001\002" +
    "\000\004\044\040\001\002\000\004\032\041\001\002\000" +
    "\006\043\043\045\042\001\002\000\004\040\uffdd\001\002" +
    "\000\004\044\044\001\002\000\004\040\uffde\001\002\000" +
    "\004\040\uffdc\001\002\000\004\045\047\001\002\000\004" +
    "\040\uffdf\001\002\000\004\037\051\001\002\000\010\014" +
    "\035\033\036\043\037\001\002\000\004\040\053\001\002" +
    "\000\004\037\054\001\002\000\010\014\035\033\036\043" +
    "\037\001\002\000\004\040\056\001\002\000\004\037\057" +
    "\001\002\000\022\006\011\012\006\013\020\014\023\015" +
    "\012\017\015\023\004\041\010\001\002\000\024\006\011" +
    "\012\006\013\020\014\023\015\012\017\015\023\004\040" +
    "\070\041\010\001\002\000\026\002\ufff3\006\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\017\ufff3\023\ufff3\040\ufff3\041" +
    "\ufff3\001\002\000\026\002\ufff9\006\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\017\ufff9\023\ufff9\040\ufff9\041\ufff9\001" +
    "\002\000\026\002\uffff\006\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\017\uffff\023\uffff\040\uffff\041\uffff\001\002\000" +
    "\026\002\ufffb\006\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\017\ufffb\023\ufffb\040\ufffb\041\ufffb\001\002\000\026\002" +
    "\ufff5\006\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5" +
    "\023\ufff5\040\ufff5\041\ufff5\001\002\000\026\002\ufff7\006" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\023\ufff7" +
    "\040\ufff7\041\ufff7\001\002\000\026\002\ufffd\006\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\023\ufffd\040\ufffd" +
    "\041\ufffd\001\002\000\026\002\uffe0\006\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\023\uffe0\040\uffe0\041\uffe0" +
    "\001\002\000\004\037\072\001\002\000\004\044\073\001" +
    "\002\000\004\044\074\001\002\000\004\040\075\001\002" +
    "\000\004\037\076\001\002\000\006\014\101\020\077\001" +
    "\002\000\004\043\107\001\002\000\006\014\101\020\077" +
    "\001\002\000\004\044\102\001\002\000\004\041\010\001" +
    "\002\000\010\014\uffd2\020\uffd2\040\uffd2\001\002\000\006" +
    "\014\101\020\077\001\002\000\004\040\106\001\002\000" +
    "\026\002\uffd3\006\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\023\uffd3\040\uffd3\041\uffd3\001\002\000\004\044" +
    "\110\001\002\000\010\014\uffd1\020\uffd1\040\uffd1\001\002" +
    "\000\004\002\001\001\002\000\026\002\uffed\006\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\023\uffed\040\uffed" +
    "\041\uffed\001\002\000\004\044\114\001\002\000\026\002" +
    "\uffee\006\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee" +
    "\023\uffee\040\uffee\041\uffee\001\002\000\006\035\117\043" +
    "\120\001\002\000\004\040\132\001\002\000\004\040\uffe6" +
    "\001\002\000\004\044\121\001\002\000\004\032\122\001" +
    "\002\000\012\005\124\035\125\044\126\045\123\001\002" +
    "\000\004\040\uffe4\001\002\000\006\005\127\044\130\001" +
    "\002\000\004\040\uffe5\001\002\000\004\040\uffe3\001\002" +
    "\000\004\040\uffe2\001\002\000\004\005\131\001\002\000" +
    "\004\040\uffe1\001\002\000\004\037\133\001\002\000\022" +
    "\006\011\012\006\013\020\014\023\015\012\017\015\023" +
    "\004\041\010\001\002\000\024\006\011\012\006\013\020" +
    "\014\023\015\012\017\015\023\004\040\135\041\010\001" +
    "\002\000\030\002\uffe9\006\uffe9\007\136\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\017\uffe9\023\uffe9\040\uffe9\041\uffe9\001" +
    "\002\000\004\037\140\001\002\000\026\002\uffe8\006\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\023\uffe8\040" +
    "\uffe8\041\uffe8\001\002\000\022\006\011\012\006\013\020" +
    "\014\023\015\012\017\015\023\004\041\010\001\002\000" +
    "\024\006\011\012\006\013\020\014\023\015\012\017\015" +
    "\023\004\040\142\041\010\001\002\000\026\002\uffe7\006" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\023\uffe7" +
    "\040\uffe7\041\uffe7\001\002\000\006\037\144\043\145\001" +
    "\002\000\004\043\153\001\002\000\004\044\146\001\002" +
    "\000\004\026\147\001\002\000\004\043\150\001\002\000" +
    "\004\044\151\001\002\000\004\042\152\001\002\000\030" +
    "\002\uffec\006\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017" +
    "\uffec\020\uffec\023\uffec\040\uffec\041\uffec\001\002\000\004" +
    "\044\154\001\002\000\004\026\155\001\002\000\006\043" +
    "\157\045\156\001\002\000\004\040\163\001\002\000\004" +
    "\044\160\001\002\000\004\040\161\001\002\000\004\042" +
    "\162\001\002\000\030\002\uffeb\006\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\017\uffeb\020\uffeb\023\uffeb\040\uffeb\041" +
    "\uffeb\001\002\000\004\042\164\001\002\000\030\002\uffea" +
    "\006\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\023\uffea\040\uffea\041\uffea\001\002\000\006\035\117" +
    "\043\120\001\002\000\004\040\167\001\002\000\004\037" +
    "\170\001\002\000\006\014\023\015\012\001\002\000\006" +
    "\014\023\015\012\001\002\000\004\040\173\001\002\000" +
    "\026\002\uffd0\006\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\023\uffd0\040\uffd0\041\uffd0\001\002\000\004\037" +
    "\175\001\002\000\014\005\200\024\176\025\177\043\203" +
    "\044\202\001\002\000\004\037\235\001\002\000\004\037" +
    "\232\001\002\000\006\044\221\045\220\001\002\000\016" +
    "\005\200\024\176\025\177\040\214\043\203\044\202\001" +
    "\002\000\004\037\210\001\002\000\004\044\204\001\002" +
    "\000\004\037\205\001\002\000\006\014\023\015\012\001" +
    "\002\000\004\040\207\001\002\000\016\005\uffd5\024\uffd5" +
    "\025\uffd5\040\uffd5\043\uffd5\044\uffd5\001\002\000\006\014" +
    "\023\015\012\001\002\000\004\040\212\001\002\000\016" +
    "\005\uffd6\024\uffd6\025\uffd6\040\uffd6\043\uffd6\044\uffd6\001" +
    "\002\000\014\005\200\024\176\025\177\043\203\044\202" +
    "\001\002\000\026\002\uffda\006\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\023\uffda\040\uffda\041\uffda\001\002" +
    "\000\014\005\200\024\176\025\177\043\203\044\202\001" +
    "\002\000\004\040\217\001\002\000\026\002\uffdb\006\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\023\uffdb\040" +
    "\uffdb\041\uffdb\001\002\000\004\005\226\001\002\000\004" +
    "\005\222\001\002\000\004\037\223\001\002\000\006\014" +
    "\023\015\012\001\002\000\004\040\225\001\002\000\016" +
    "\005\uffd7\024\uffd7\025\uffd7\040\uffd7\043\uffd7\044\uffd7\001" +
    "\002\000\004\037\227\001\002\000\006\014\023\015\012" +
    "\001\002\000\004\040\231\001\002\000\016\005\uffd8\024" +
    "\uffd8\025\uffd8\040\uffd8\043\uffd8\044\uffd8\001\002\000\006" +
    "\014\023\015\012\001\002\000\004\040\234\001\002\000" +
    "\016\005\uffd9\024\uffd9\025\uffd9\040\uffd9\043\uffd9\044\uffd9" +
    "\001\002\000\006\014\023\015\012\001\002\000\004\040" +
    "\237\001\002\000\016\005\uffd4\024\uffd4\025\uffd4\040\uffd4" +
    "\043\uffd4\044\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\024\002\013\003\016\004\012\006\015\010" +
    "\004\011\006\014\023\015\020\017\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\062\006\063\010\060\011\061" +
    "\014\066\015\065\017\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\057\004\012\006\015\010\004\011\006\014\023\015\020" +
    "\017\021\001\001\000\020\004\062\006\063\010\060\011" +
    "\061\014\066\015\065\017\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\077" +
    "\001\001\000\002\001\001\000\004\020\103\001\001\000" +
    "\002\001\001\000\004\014\102\001\001\000\002\001\001" +
    "\000\004\020\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\133\004\012\006\015" +
    "\010\004\011\006\014\023\015\020\017\021\001\001\000" +
    "\020\004\062\006\063\010\060\011\061\014\066\015\065" +
    "\017\064\001\001\000\004\021\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\140\004\012\006\015" +
    "\010\004\011\006\014\023\015\020\017\021\001\001\000" +
    "\020\004\062\006\063\010\060\011\061\014\066\015\065" +
    "\017\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\170\001\001\000\004\004\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\214\001\001\000\002\001\001\000\004\016" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\235\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE ::= While Llave_apertura SENTENCIA_BOOLEANA Llave_cierre Llave_apertura DECLARACION DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_PROC ::= Return Signo_dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PROC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_PROC ::= Set Identificador EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PROC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PROCEDIMIENTO ::= Procedimiento Identificador Llave_apertura Identificador Identificador Llave_cierre Llave_apertura SENTENCIA_PROC SENTENCIA_PROC SENTENCIA_PROC Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_SWITCH ::= Default Llave_apertura DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_SWITCH ::= Signo_dolar Identificador Llave_apertura DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_SWITCH ::= Identificador Llave_apertura DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_SWITCH ::= Comillas Identificador Comillas Llave_apertura DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_SWITCH ::= Comillas Numero Comillas Llave_apertura DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_SWITCH ::= Literal Llave_apertura DECLARACION Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= Switch Identificador Llave_apertura SENTENCIA_SWITCH Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWITCH ::= Switch Identificador Llave_apertura SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_FOR ::= Signo_dolar Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_FOR ::= Signo_dolar Identificador Op_relacional Signo_dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_FOR ::= Set Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= For Llave_apertura SENTENCIA_FOR Llave_cierre Llave_apertura SENTENCIA_FOR Llave_cierre Llave_apertura SENTENCIA_FOR Llave_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Signo_dolar Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Signo_dolar Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Signo_dolar Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Signo_dolar Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Signo_dolar Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_IF ::= Else Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= If Llave_apertura SENTENCIA_BOOLEANA Llave_cierre Llave_apertura SENTENCIA Llave_cierre DECLARACION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= If Llave_apertura SENTENCIA_BOOLEANA Llave_cierre Llave_apertura SENTENCIA Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= Corchete_apertura Expr Llave_apertura Signo_dolar Identificador Op_aritmetico Numero Llave_cierre Corchete_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= Corchete_apertura Expr Llave_apertura Signo_dolar Identificador Op_aritmetico Signo_dolar Identificador Llave_cierre Corchete_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= Corchete_apertura Expr Signo_dolar Identificador Op_aritmetico Signo_dolar Identificador Corchete_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Puts Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Puts Signo_dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Set Identificador Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Set Identificador EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Set Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA PROCEDIMIENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

